/**
 * Copyright (c) 2011 Source Auditor Inc.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
package org.spdx.licenselistpublisher;

import java.io.BufferedReader;
import java.io.Closeable;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.nio.file.Files;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Map.Entry;
import java.util.Set;

import org.apache.commons.io.FileUtils;
import org.spdx.core.InvalidSPDXAnalysisException;
import org.spdx.crossref.CrossRefHelper;
import org.spdx.library.SpdxModelFactory;
import org.spdx.library.model.v2.SpdxConstantsCompatV2;
import org.spdx.library.model.v2.license.SpdxListedLicenseException;
import org.spdx.licenseTemplate.InvalidLicenseTemplateException;
import org.spdx.licenseTemplate.LicenseTextHelper;
import org.spdx.licenselistpublisher.licensegenerator.*;
import org.spdx.licensexml.XmlLicenseProviderSingleFile;
import org.spdx.licensexml.XmlLicenseProviderWithCrossRefDetails;
import org.spdx.utility.compare.LicenseCompareHelper;
import org.spdx.utility.compare.SpdxCompareException;

import au.com.bytecode.opencsv.CSVReader;

/**
 * Converts input license text and metadata into various output formats.
 *
 * Supported input formats:
 *  - License XML file - File following the SPDX legal team license format
 *  - Directory of XML files - Directory of files following the SPDX legal team license format
 *
 * Supported output formats:
 *  - Text - license text
 *  - Templates - license templates as defined by the SPDX legal team matching guidelines
 *  - Json-LD - SPDX Spec version 3 JSON-LD format
 *  - JSON - Json format as defined in https://github.com/spdx/license-list-data
 *  - RDFa - HTML with RDFa tags as defined in https://github.com/spdx/license-list-data
 *  - RDF NT - RDF NT format defined by the SPDX Spec version 2.3
 *  - RDF XML - RDF XML format defined by the SPDX Spec version 2.3
 *  - RDF Turtle - RDF Turtle format defined by the SPDX Spec version 2.3
 *  - Website - the content for the website available at https://spdx.org/licenses
 *  - license-list-XML - A copy of the input license XML file(s)
 *
 *  Output generated by this tool can be found at https://github.com/spdx/license-list-data and on the
 *  spdx.org licenses website
 *
 *  To add a new output format, create a class supporting the ILicenseFormatWriter interface and add it
 *  to the writers list.
 *  
 *  If there is testfiles is passed in as a parameter, text from the test files will be used for the verbatim
 *  license or exception text.  To override this behavior, set an environment variable USE_SYSTEM_TEST to false
 *
 * @author Gary O'Neall
 *
 */
public class LicenseRDFAGenerator {

	static final Set<Character> INVALID_TEXT_CHARS = new HashSet<>();

	static {
		INVALID_TEXT_CHARS.add('\uFFFD');
	}
	static int MIN_ARGS = 2;
	static int MAX_ARGS = 7;

	static final int ERROR_STATUS = 1;
	static final int WARNING_STATUS = 64;
	static final String CSS_TEMPLATE_FILE = "resources/screen.css";
	static final String CSS_FILE_NAME = "screen.css";
	static final String SORTTABLE_JS_FILE = "resources/sorttable.js";
	static final String SORTTABLE_FILE_NAME = "sorttable.js";
	static final String TEXT_FOLDER_NAME = "text";
	static final String TEMPLATE_FOLDER_NAME = "template";
	static final String HTML_FOLDER_NAME = "html";
	static final String RDFA_FOLDER_NAME = "rdfa";
	static final String JSON_FOLDER_NAME = "json";
	private static final String WEBSITE_FOLDER_NAME = "website";
	private static final String RDFXML_FOLDER_NAME = "rdfxml";
	private static final String RDFTURTLE_FOLDER_NAME = "rdfturtle";
	private static final String RDFNT_FOLDER_NAME = "rdfnt";
	private static final String TABLE_OF_CONTENTS_FILE_NAME = "licenses.md";
	private static final String RDF_JSON_LD_FOLDER_NAME = "jsonld";
	private static final String LICENSE_XML_FOLDER_NAME = "license-list-XML";
	private static final String ENV_USE_SYSTEM_TEST = "USE_TEST_FOR_TEXT";

	/**
	 * @param args Arg 0 is either a license XML file or a directory of licenses in XML format,
	 *             arg 1 is the directory for the output html files
	 *             arg 2 is the optional license list version
	 *             arg 3 is the optional release date
	 *             arg 4 is the optional directory of original license texts with file names {license-or-excpetion-id}.txt
	 *             arg 5 is the optional file containing a list of warnings to ignore
	 *             arg 6 is the optional directory of positive and negative tests for the licenses with the pattern {license-id}/(license|header|exception)/(good|bad)/{test-id}.txt
	 */
	public static void main(String[] args) {
		SpdxModelFactory.init();
		if (args == null || args.length < MIN_ARGS || args.length > MAX_ARGS) {
			System.out.println("Invalid arguments");
			usage();
			System.exit(ERROR_STATUS);
		}
		File licenseXmlFileOrDir = new File(args[0]);
		if (!licenseXmlFileOrDir.exists()) {
			System.out.println("License XML "+licenseXmlFileOrDir.getName()+" does not exist");
			usage();
			System.exit(ERROR_STATUS);
		}
		File dir = new File(args[1]);
		if (!dir.exists()) {
			System.out.println("Output directory "+dir.getName()+" does not exist");
			usage();
			System.exit(ERROR_STATUS);
		}
		if (!dir.isDirectory()) {
			System.out.println("Output directory "+dir.getName()+" is not a directory");
			usage();
			System.exit(ERROR_STATUS);
		}
		String version = null;
		if (args.length > 2) {
			version = args[2];
		}
		String releaseDate = null;
		if (args.length > 3) {
			releaseDate = args[3];
		}
		File testFileDir = null;
		if (args.length > 4) {
			testFileDir = new File(args[4]);
			if (!testFileDir.exists()) {
				System.out.println("License test directory "+testFileDir.getName()+" does not exist");
				usage();
				System.exit(ERROR_STATUS);
			}
			if (!testFileDir.isDirectory()) {
				System.out.println("License test directory "+testFileDir.getName()+" is not a directory");
				usage();
				System.exit(ERROR_STATUS);
			}
		}
		String[] ignoredWarnings = new String[0];
		if (args.length > 5) {
			CSVReader reader = null;
			try {
				File warningsFile = new File(args[5]);
				if (warningsFile.exists()) {
					reader = new CSVReader(new FileReader(warningsFile));
				} else {
					reader = new CSVReader(new StringReader(args[5]));
				}
				ignoredWarnings = reader.readNext();
			} catch (IOException e) {
				System.out.println("IO Error reading ignored errors: "+e.getMessage());
				System.exit(ERROR_STATUS);
			} finally {
				if (reader != null) {
					try {
						reader.close();
					} catch (IOException e) {
						System.out.println("IO Error closing ignored errors string: "+e.getMessage());
						System.exit(ERROR_STATUS);
					}
				}
			}
		}

		File fullTestDir = null;
		if (args.length > 6) {
			fullTestDir = new File(args[6]);
			if (!fullTestDir.exists()) {
				System.out.println("Full license test directory "+testFileDir.getName()+" does not exist");
				usage();
				System.exit(ERROR_STATUS);
			}
			if (!fullTestDir.isDirectory()) {
				System.out.println("Full license test directory "+testFileDir.getName()+" is not a directory");
				usage();
				System.exit(ERROR_STATUS);
			}
		}
		
		boolean useTestText = true;	// default to true
		try {
			String useTestTextStr = System.getenv(ENV_USE_SYSTEM_TEST);
			if (Objects.nonNull(useTestTextStr)) {
				useTestText = Boolean.parseBoolean(useTestTextStr);
			}
		} catch(SecurityException ex) {
			System.out.println("Security exception checking for the environment variable "+ENV_USE_SYSTEM_TEST+".  Using the default useTestText = true.");
		}
		
		try {
			List<String> warnings = generateLicenseData(licenseXmlFileOrDir, dir, version, releaseDate, testFileDir, useTestText, fullTestDir);
			if (warnings != null && warnings.size() > 0) {
				int numUnexpectedWarnings = warnings.size();
				for (String warning:warnings) {
					boolean ignore = false;
					for (String ignoreStr:ignoredWarnings) {
						if (warning.equalsIgnoreCase(ignoreStr)) {
							ignore = true;
							System.out.println("Ignoring warning '"+ignoreStr+"'");
							break;
						}
					}
					if (ignore) {
						numUnexpectedWarnings--;
					}
				}
				if (numUnexpectedWarnings > 0) {
					System.exit(WARNING_STATUS);
				}
			}
		} catch (LicenseGeneratorException e) {
			System.out.println(e.getMessage());
			System.exit(ERROR_STATUS);
		}
	}
	/**
	 * Generate license data
	 * @param licenseXml License XML file or directory containing license XML files
	 * @param dir Output directory for the generated results
	 * @param version Version for the license list
	 * @param releaseDateUnformated Release data string for the license
	 * @param testFileDir Directory of license text to test the generated licenses against
	 * @param useTestText use the text file from the testFileDir for the verbatim text rather than the text from the XML document
	 * @param fullTestDir Directory for testing license texts with the pattern {license-id}/(license|header|exception)/(good|bad)/{test-id}.txt
	 * @return warnings list of warnings
	 * @throws LicenseGeneratorException on errors
	 */
	public static List<String> generateLicenseData(File licenseXml, File dir,
			                                       String version, String releaseDateUnformated,
												   File testFileDir, boolean useTestText,
												   File fullTestDir) throws LicenseGeneratorException {
		String releaseDate = convertDateFormat(releaseDateUnformated);
		List<String> warnings = new ArrayList<>();
		List<ILicenseFormatWriter> writers = new ArrayList<>();
		ISpdxListedLicenseProvider licenseProvider = null;
		try {
			File licenseXmlOutputFolder = new File(dir.getPath() + File.separator +  LICENSE_XML_FOLDER_NAME);
			if (!licenseXmlOutputFolder.isDirectory() && !licenseXmlOutputFolder.mkdir()) {
				throw new LicenseGeneratorException("Error: license-xml folder is not a directory");
			}
			if (licenseXml.isDirectory()) {
				licenseProvider = new XmlLicenseProviderWithCrossRefDetails(licenseXml, version, releaseDate);
				FileUtils.copyDirectory(licenseXml, licenseXmlOutputFolder);
			} else {
				licenseProvider = new XmlLicenseProviderSingleFile(licenseXml, version, releaseDate);
				Files.copy(licenseXml.toPath(), licenseXmlOutputFolder.toPath().resolve(licenseXml.getName()));
			}
			File textFolder = new File(dir.getPath() + File.separator +  TEXT_FOLDER_NAME);
			if (!textFolder.isDirectory() && !textFolder.mkdir()) {
				throw new LicenseGeneratorException("Error: text folder is not a directory");
			}
			writers.add(new LicenseTextFormatWriter(textFolder));
			File templateFolder = new File(dir.getPath() + File.separator +  TEMPLATE_FOLDER_NAME);
			if (!templateFolder.isDirectory() && !templateFolder.mkdir()) {
				throw new LicenseGeneratorException("Error: template folder is not a directory");
			}
			writers.add(new LicenseTemplateFormatWriter(templateFolder));
			File htmlFolder = new File(dir.getPath() + File.separator +  HTML_FOLDER_NAME);
			if (!htmlFolder.isDirectory() && !htmlFolder.mkdir()) {
				throw new LicenseGeneratorException("Error: HTML folder is not a directory");
			}
			writers.add(new LicenseHtmlFormatWriter(version, releaseDate, htmlFolder));
			File rdfaFolder = new File(dir.getPath() + File.separator +  RDFA_FOLDER_NAME);
			if (!rdfaFolder.isDirectory() && !rdfaFolder.mkdir()) {
				throw new LicenseGeneratorException("Error: RDFa folder is not a directory");
			}
			writers.add(new LicenseRdfaFormatWriter(version, releaseDate, rdfaFolder));	// Note: RDFa format is the same as the HTML
			File jsonFolder = new File(dir.getPath() + File.separator +  JSON_FOLDER_NAME);
			if (!jsonFolder.isDirectory() && !jsonFolder.mkdir()) {
				throw new LicenseGeneratorException("Error: JSON folder is not a directory");
			}
			File jsonFolderDetails = new File(dir.getPath() + File.separator +  JSON_FOLDER_NAME+ File.separator + "details");
			if (!jsonFolderDetails.isDirectory() && !jsonFolderDetails.mkdir()) {
				throw new LicenseGeneratorException("Error: JSON folder is not a directory");
			}
			File jsonFolderExceptions = new File(dir.getPath() + File.separator +  JSON_FOLDER_NAME + File.separator + "exceptions");
			if (!jsonFolderExceptions.isDirectory() && !jsonFolderExceptions.mkdir()) {
				throw new LicenseGeneratorException("Error: JSON folder is not a directory");
			}
			writers.add(new LicenseJsonFormatWriter(version, releaseDate, jsonFolder, jsonFolderDetails, jsonFolderExceptions));
			File website = new File(dir.getPath() + File.separator +  WEBSITE_FOLDER_NAME);
			if (!website.isDirectory() && !website.mkdir()) {
				throw new LicenseGeneratorException("Error: Website folder is not a directory");
			}
			writers.add(new SpdxWebsiteFormatWriter(version, releaseDate, website));
			File rdfXml = new File(dir.getPath() + File.separator +  RDFXML_FOLDER_NAME);
			if (!rdfXml.isDirectory() && !rdfXml.mkdir()) {
				throw new LicenseGeneratorException("Error: RdfXML folder is not a directory");
			}
			File rdfTurtle = new File(dir.getPath() + File.separator +  RDFTURTLE_FOLDER_NAME);
			if (!rdfTurtle.isDirectory() && !rdfTurtle.mkdir()) {
				throw new LicenseGeneratorException("Error: RDF Turtle folder is not a directory");
			}
			File rdfNt = new File(dir.getPath() + File.separator +  RDFNT_FOLDER_NAME);
			if (!rdfNt.isDirectory() && !rdfNt.mkdir()) {
				throw new LicenseGeneratorException("Error: RDF NT folder is not a directory");
			}
			File rdfJsonLd  = new File(dir.getPath() + File.separator +  RDF_JSON_LD_FOLDER_NAME);
			if (!rdfJsonLd.isDirectory() && !rdfJsonLd.mkdir()) {
				throw new LicenseGeneratorException("Error: RDF JSON-LD folder is not a directory");
			}
			writers.add(new LicenseRdfFormatWriter(rdfXml, rdfTurtle, rdfNt, rdfJsonLd));
			File markdownFile = new File(dir.getPath() + File.separator +  TABLE_OF_CONTENTS_FILE_NAME);
			if (!markdownFile.isFile() && !markdownFile.createNewFile()) {
				throw new LicenseGeneratorException("Error: Unable to create markdown file");
			}
			writers.add(new LicenseMarkdownFormatWriter(version, releaseDate, markdownFile));
			File v3JsonLd = new File(dir.getPath() + File.separator + LicenseV3JsonLdFormatWriter.SPDX_V3_FOLDER_NAME + 
					File.separator + LicenseV3JsonLdFormatWriter.SPDX_V3_JSON_LD_FOLDER_NAME);
			if (!v3JsonLd.isDirectory() && !v3JsonLd.mkdirs()) {
				throw new LicenseGeneratorException("Error: SPDX V3 Json-LD folder is not a directory");
			}
			writers.add(new LicenseV3JsonLdFormatWriter(version, releaseDate, v3JsonLd));
			ILicenseTester tester = null;
			if (testFileDir != null) {
				if (fullTestDir != null) {
					tester = new CombinedLicenseTester(testFileDir, fullTestDir);
				} else {
					tester = new SimpleLicenseTester(testFileDir);
				}
			}
			System.out.print("Processing License List");
			Set<String> licenseIds = writeLicenseList(version, releaseDate, licenseProvider, warnings, 
					writers, tester, useTestText);
			System.out.println();
			System.out.print("Processing Exceptions");
			writeExceptionList(version, releaseDate, licenseProvider, warnings, writers, tester, 
					licenseIds, useTestText);
			System.out.println();
			System.out.print("Writing table of contents");
			for (ILicenseFormatWriter writer : writers) {
				writer.writeToC();
			}
			writeCssFile(website);
			writeSortTableFile(website);
			System.out.println();
			warnings.addAll(licenseProvider.getWarnings());
			if (warnings.size() > 0) {
				System.out.println("The following warning(s) were identified:");
				for (String warning : warnings) {
					System.out.println("\t"+warning);
				}
			}
			System.out.println("Completed processing licenses");
			return warnings;
		} catch (SpdxListedLicenseException e) {
			throw new LicenseGeneratorException("\nError reading standard licenses: "+e.getMessage(),e);
		} catch (LicenseGeneratorException e) {
			throw(e);
		} catch (Exception e) {
			throw new LicenseGeneratorException("\nUnhandled exception generating html: "+e.getMessage(),e);
		}
	}

	/**
	 * @param unformattedDate unformatted date
	 * @return date in the SPDX specified format
	 * @throws LicenseGeneratorException when the date could not be parsed
	 */
	private static String convertDateFormat(String unformattedDate) throws LicenseGeneratorException {
		DateTimeFormatterBuilder fromFormatterBuilder = new DateTimeFormatterBuilder()
		        .append(DateTimeFormatter.ofPattern("[MM/dd/yyyy]" + "[dd-MM-yyyy]" + "[yyyy-MM-dd]" + 
		        		"[" + SpdxConstantsCompatV2.SPDX_DATE_FORMAT + "]"));
		DateTimeFormatter fromFormatter = fromFormatterBuilder.toFormatter();
		LocalDate date = LocalDate.parse(unformattedDate, fromFormatter);
		if (Objects.isNull(date)) {
			throw new LicenseGeneratorException("Could not parse the release date: "+unformattedDate);
		}
		DateTimeFormatter toFormatter = DateTimeFormatter.ofPattern(SpdxConstantsCompatV2.SPDX_DATE_FORMAT);
		return date.atStartOfDay().format(toFormatter);
	}
	/**
	 * @param version License list version
	 * @param releaseDate release date for the license list
	 * @param licenseProvider Provides the licensing information
	 * @param warnings Populated with any warnings if they occur
	 * @param writers License Format Writers to handle the writing for the different formats
	 * @param tester License tester used to test the results of licenses
	 * @param licenseIds license IDs
	 * @param useTestText use the text file from the testFileDir for the verbatim text rather than the text from the XML document
	 * @throws IOException
	 * @throws LicenseGeneratorException
	 * @throws InvalidLicenseTemplateException
	 * @throws InvalidSPDXAnalysisException 
	*/
	private static void writeExceptionList(String version, String releaseDate,
			ISpdxListedLicenseProvider licenseProvider, List<String> warnings, List<ILicenseFormatWriter> writers,
			ILicenseTester tester, Set<String> licenseIds, boolean useTestText) throws IOException, LicenseGeneratorException, InvalidLicenseTemplateException, InvalidSPDXAnalysisException {
		// Collect license ID's to check for any duplicate ID's being used (e.g. license ID == exception ID)
		Iterator<ListedExceptionContainer> exceptionIter = licenseProvider.getExceptionIterator();
		Map<String, String> addedExceptionsMap = new HashMap<>();
		while (exceptionIter.hasNext()) {
			System.out.print(".");
			ListedExceptionContainer nextExceptionContainer = exceptionIter.next();
			addExternalMetaData(nextExceptionContainer);
			if (nextExceptionContainer.getV2Exception().getLicenseExceptionId() != null && 
					!nextExceptionContainer.getV2Exception().getLicenseExceptionId().isEmpty()) {
				// check for duplicate exceptions
				if (!nextExceptionContainer.getV2Exception().isDeprecated()) {
					Iterator<Entry<String, String>> addedExceptionIter = addedExceptionsMap.entrySet().iterator();
					while (addedExceptionIter.hasNext()) {
						Entry<String, String> entry = addedExceptionIter.next();
						if (entry.getValue().trim().equals(nextExceptionContainer.getV2Exception().getLicenseExceptionText().trim())) {
							warnings.add("Duplicates exceptions: "+nextExceptionContainer.getV2Exception().getLicenseExceptionId()+", "+entry.getKey());
						}
					}
					// check for a license ID with the same ID as the exception
					addedExceptionsMap.put(nextExceptionContainer.getV2Exception().getLicenseExceptionId(), 
							nextExceptionContainer.getV2Exception().getLicenseExceptionText());
				}
				if (licenseIds.contains(nextExceptionContainer.getV2Exception().getLicenseExceptionId())) {
					warnings.add("A license ID exists with the same ID as an exception ID: "+nextExceptionContainer.getV2Exception().getLicenseExceptionId());
				}
				checkText(nextExceptionContainer.getV2Exception().getLicenseExceptionText(),
						"License Exception Text for "+nextExceptionContainer.getV2Exception().getLicenseExceptionId(), warnings);
				if (tester != null) {
					List<String> testResults = tester.testException(nextExceptionContainer);
					if (testResults != null && testResults.size() > 0) {
						for (String testResult:testResults) {
							warnings.add("Test for exception "+nextExceptionContainer.getV2Exception().getLicenseExceptionId() + " failed: "+testResult);
						}
					} else if (useTestText) {
						String testText = tester.getExceptionTestText(nextExceptionContainer.getV2Exception().getLicenseExceptionId());
						if (Objects.nonNull(testText)) {
							nextExceptionContainer.getV2Exception().setLicenseExceptionText(testText);
							nextExceptionContainer.getV3Exception().setAdditionText(testText);
						}
					}
				}
				for (ILicenseFormatWriter writer:writers) {
					writer.writeException(nextExceptionContainer);
				}
			}
		}
	}

	/**
	 * Add any additional data to a license exception from external sources
	 * @param exceptionContainer Exception with fields updated from external sources
	 */
	private static void addExternalMetaData(ListedExceptionContainer exceptionContainer) {
		// Currently, there is no data to add
	}

	/**
	 * Check text for invalid characters
	 * @param text Text to check
	 * @param textDescription Description of the text being check (this will be used to form warning messages)
	 * @param warnings Array list of warnings to add to if an problem is found with the text
	 */
	private static void checkText(String text, String textDescription,
			List<String> warnings) {
		BufferedReader reader = new BufferedReader(new StringReader(text));
		try {
			int lineNumber = 1;
			String line = reader.readLine();
			while (line != null) {
				for (int i = 0; i < line.length(); i++) {
					if (INVALID_TEXT_CHARS.contains(line.charAt(i))) {
						warnings.add("Invalid character in " + textDescription +
								" at line number " + String.valueOf(lineNumber) +
								" \"" +line + "\" at character location "+String.valueOf(i));
					}
				}
				lineNumber++;
				line = reader.readLine();
			}
		} catch (IOException e) {
			warnings.add("IO error reading text");
		} finally {
			try {
				reader.close();
			} catch (IOException e) {
				warnings.add("IO Error closing string reader");
			}
		}
	}

	/**
	 * Formats and writes the license list data
	 * @param version License list version
	 * @param releaseDate License list release date
	 * @param licenseProvider Provides the licensing information
	 * @param warnings Populated with any warnings if they occur
	 * @param writers License Format Writers to handle the writing for the different formats
	 * @param tester license tester to test the results of each license added
	 * @param useTestText use the text file from the testFileDir for the verbatim text rather than the text from the XML document
	 * @return list of license ID's which have been added
	 * @throws LicenseGeneratorException
	 * @throws InvalidSPDXAnalysisException
	 * @throws IOException
	 * @throws SpdxListedLicenseException
	 * @throws SpdxCompareException
	 * @throws InvalidLicenseTemplateException 
	 */
	private static Set<String> writeLicenseList(String version, String releaseDate,
			ISpdxListedLicenseProvider licenseProvider, List<String> warnings,
			List<ILicenseFormatWriter> writers, ILicenseTester tester, boolean useTestText) 
					throws LicenseGeneratorException, InvalidSPDXAnalysisException, IOException, SpdxListedLicenseException, SpdxCompareException, InvalidLicenseTemplateException {
		Iterator<ListedLicenseContainer> licenseIter = licenseProvider.getLicenseIterator();
		try {
			Map<String, String> addedLicIdTextMap = new HashMap<>();	// keep track for duplicate checking
			while (licenseIter.hasNext()) {
				System.out.print(".");
				ListedLicenseContainer licenseContainer = licenseIter.next();
				if (licenseProvider instanceof XmlLicenseProviderSingleFile) {
					licenseContainer.getV2ListedLicense().getCrossRef().addAll(
							CrossRefHelper.buildUrlDetails(licenseContainer.getV2ListedLicense()));
				}
				addExternalMetaData(licenseContainer);
				String licenseId = licenseContainer.getV2ListedLicense().getLicenseId();
				if (licenseId != null && !licenseId.isEmpty()) {
					// Check for duplicate licenses
					if (!licenseContainer.getV2ListedLicense().isDeprecated()) {
						Iterator<Entry<String, String>> addedLicenseTextIter = addedLicIdTextMap.entrySet().iterator();
						while (addedLicenseTextIter.hasNext()) {
							Entry<String, String> entry = addedLicenseTextIter.next();
							if (LicenseTextHelper.isLicenseTextEquivalent(entry.getValue(), licenseContainer.getV2ListedLicense().getLicenseText())) {
								warnings.add("Duplicates licenses: "+licenseContainer.getV2ListedLicense().getLicenseId()+", "+entry.getKey());
							}
						}
						addedLicIdTextMap.put(licenseId, licenseContainer.getV2ListedLicense().getLicenseText());
					}
					checkText(licenseContainer.getV2ListedLicense().getLicenseText(), "License text for "+licenseId, warnings);
					if (tester != null) {
						List<String> testResults = tester.testLicense(licenseContainer);
						if (testResults != null && testResults.size() > 0) {
							for (String testResult:testResults) {
								warnings.add("Test for license "+licenseId + " failed: "+testResult);
							}
						} else if (useTestText) {
							String testText = tester.getLicenseTestText(licenseId);
							if (Objects.nonNull(testText)) {
								licenseContainer.getV2ListedLicense().setLicenseText(testText);
								licenseContainer.getV3ListedLicense().setLicenseText(testText);
							}
						}
					}
					for (ILicenseFormatWriter writer : writers) {
						if (writer instanceof LicenseTextFormatWriter) {
							((LicenseTextFormatWriter)(writer)).writeLicense(licenseContainer, 
									licenseContainer.getV2ListedLicense().isDeprecated(), 
									licenseContainer.getV2ListedLicense().getDeprecatedVersion(), !useTestText);
						} else {
							writer.writeLicense(licenseContainer, licenseContainer.getV2ListedLicense().isDeprecated(), 
									licenseContainer.getV2ListedLicense().getDeprecatedVersion());
						}
					}
				}
			}
			if (addedLicIdTextMap.size() == 1) {
			    // Since we are only creating a single file, we should check the listed licenses for duplicates
			    addedLicIdTextMap.entrySet().forEach(entry -> {
		             String[] matchingLicenseIds;
                    try {
                        matchingLicenseIds = LicenseCompareHelper.matchingStandardLicenseIds(entry.getValue());
                        for (String matchingId:matchingLicenseIds) {
                            if (!entry.getKey().equals(matchingId)) {
                                warnings.add("Duplicates licenses: "+entry.getKey()+", "+matchingId);
                            }
                        }
                    } catch (InvalidSPDXAnalysisException e) {
                        warnings.add("Error comparing single license to existing listed licenses: "+e.getMessage());
                    } catch (SpdxCompareException e) {
                        warnings.add("Error comparing single license to existing listed licenses: "+e.getMessage());
                    }
			    });
			}
			return addedLicIdTextMap.keySet();
		} finally {
			if (licenseIter instanceof Closeable) {
				((Closeable)licenseIter).close();
				//TODO: Is there a cleaner way to handle this?  The XmlLicenseProviderWithCrossRefDetails uses executorService which must be closed
			}
		}
	}

	/**
	 * Update license fields based on information from external metadata
	 * @param licenseContainer
	 * @throws LicenseGeneratorException
	 * @throws InvalidSPDXAnalysisException 
	 */
	private static void addExternalMetaData(ListedLicenseContainer licenseContainer) throws LicenseGeneratorException, InvalidSPDXAnalysisException {
		Boolean fsfLibre = FsfLicenseDataParser.getFsfLicenseDataParser().isSpdxLicenseFsfLibre(licenseContainer.getV2ListedLicense().getLicenseId());
		licenseContainer.getV2ListedLicense().setFsfLibre(fsfLibre);
		licenseContainer.getV3ListedLicense().setIsFsfLibre(fsfLibre);
	}

	/**
	 * Copy a file from the resources directory to a destination file
	 * @param resourceFileName filename of the file in the resources directory
	 * @param destination target file - warning, this will be overwritten
	 * @throws IOException
	 */
	private static void copyResourceFile(String resourceFileName, File destination) throws IOException {
		File resourceFile = new File(resourceFileName);
		if (resourceFile.exists()) {
			Files.copy(resourceFile.toPath(), destination.toPath());
		} else {
			InputStream is = LicenseRDFAGenerator.class.getClassLoader().getResourceAsStream(resourceFileName);
			InputStreamReader reader = new InputStreamReader(is);
			FileWriter writer = new FileWriter(destination);
			try {
				char[] buf = new char[2048];
				int len = reader.read(buf);
				while (len > 0) {
					writer.write(buf, 0, len);
					len = reader.read(buf);
				}
			} finally {
				if (writer != null) {
					writer.close();
				}
				reader.close();
			}
		}
	}

	private static void writeCssFile(File dir) throws IOException {
		File cssFile = new File(dir.getPath()+ File.separator + CSS_FILE_NAME);
		if (cssFile.exists()) {
			if (!cssFile.delete()) {
				throw(new IOException("Unable to delete old file"));
			}
		}
		copyResourceFile(CSS_TEMPLATE_FILE, cssFile);
	}

	private static void writeSortTableFile(File dir) throws IOException {
		File sortTableFile = new File(dir.getPath()+ File.separator + SORTTABLE_FILE_NAME);
		if (sortTableFile.exists()) {
			return;	// assume we don't need to create it
		}
		copyResourceFile(SORTTABLE_JS_FILE, sortTableFile);
	}

	private static void usage() {
		System.out.println("Usage:");
		System.out.println("LicenseRDFAGenerator licencenseXmlFileOrDir outputDirectory [version] [releasedate] [testfiles] [ignoredwarnings]");
		System.out.println("   licencenseXmlFileOrDir - a license XML file or a directory of license XML files");
		System.out.println("   outputDirectory - Directory to store the output from the license generator");
		System.out.println("   [version] - Version of the SPDX license list");
		System.out.println("   [releasedate] - Release date of the SPDX license list");
		System.out.println("   [testfiles] - Directory of original text files to compare the generated licenses against");
		System.out.println("   [ignoredwarnings] - Either a file name or a comma separated list of warnings to be ignored");
	}

}
